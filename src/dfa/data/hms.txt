statechart hms{
	types{
		type Date<| |>;
		type map<|A,B|>;
		struct Complaint{
			id:int;
			complainttype:int;
			roomNo:int;
			blockNo:int;
			startDate:Date;
			status:int; //Launched=1, Reviewed and propogated=2, Rejected=3, Assigned=4, Resolved=5, Acknowledged=6
			area:string;
		}
		struct Department{
			id:int;
			name:string;
			incharge:string;
			contactno:string;
		}
		struct User{
			username:string;
			password:string;
			usertype:int; //admin=1;
			contactno:string;
			emailID:string;
		}
		struct EscalationPolicy{
			level1Duration:int;
			level2Duration:int;
			level3Duration:int;
			level1User:User;
			level2User:User;
			level3User:User;
		}	
	}
	events{
		eLogin;
		eAddUser;
		eDeleteUser;
	}
	registeredUsers:map<|string,User|>;
	admintype:int;
	studenttype:int; centraladmintype:int; centreheadtype:int; //usertype
	complaintLaunched:int; 
	complaintReviewedandPropogated:int; 
	complaintRejected:int; 
	complaintAssigned:int; 
	complaintResolved:int; 
	complaintAcknowledged:int;
	entry:{
			admintype:=1;
			studenttype:=2;
			centraladmintype:=3;
			centreheadtype:=4;
			complaintLaunched:=1; 
			complaintReviewedandPropogated:=2; 
			complaintRejected:=3; 
			complaintAssigned:=4; 
			complaintResolved:=5; 
			complaintAcknowledged:=6;
	}
	exit:{}
	functions{
		get_map<| A, B |>(amap : map<| A, B |>, k : A) : B; 
	    put_map<| A, B |>(amap : map<| A, B |>, k : A, v : B) : map<| A, B |>;
        remove_val_from_map<| A, B |>(amap : map<| A, B |>, k : A) : boolean;	
		sizeOf<|A,B|>(amap:map<|A,B|>):int;
		isNull<|A|>(a:A):boolean;
	}
	state LoggedOut{
		uname#:string;
		pass#:string;
		enteredUser:User;
		entry:{
		}
		exit:{
			enteredUser:=get_map<|string,User|>(registeredUsers,uname);
		}
	}
	state LoggedIn{
		loggedInUser:User;
		state AdminModule{
			state UserManagement{
				state UserAddition{
					username#:string;
					password#:string;
					confirmpassword#:string;
					contactno#:string;
					emailID#:string;
					usertype#:int;
					newuser:User;
					exit:{
							newuser.username:=username;
							newuser.password:=password;
							newuser.contactno:=contactno;
							newuser.usertype:=usertype;
							newuser.emailID:=emailID;
					}
				}
				state UserDeletion{
					username#:string;
				}
				state EnableUser{
				}
				state DisableUser{
				}
				transition UserAdditionDone{
					source:hms.LoggedIn.AdminModule.UserManagement.UserAddition;
					destination:hms.LoggedIn.AdminModule.UserManagement.UserAddition;
					trigger:eAddUser;
					guard:isNull<|User|>(hms.LoggedIn.AdminModule.UserManagement.UserAddition.newuser);
					action:{registeredUsers:=put_map<|string,User|>(registeredUsers,hms.LoggedIn.AdminModule.UserManagement.UserAddition.username,hms.LoggedIn.AdminModule.UserManagement.UserAddition.newuser);}
				}
				transition UserDeletion_UserAddition{
					source:hms.LoggedIn.AdminModule.UserManagement.UserDeletion;
					destination:hms.LoggedIn.AdminModule.UserManagement.UserAddition;
					trigger:eAddUser;
					guard:true;
					action:{}
				}
				transition EnableUser_UserAddition{
					source:hms.LoggedIn.AdminModule.UserManagement.EnableUser;
					destination:hms.LoggedIn.AdminModule.UserManagement.UserAddition;
					trigger:eAddUser;
					guard:true;
					action:{}
				}
				transition DisableUser_UserAddition{
					source:hms.LoggedIn.AdminModule.UserManagement.DisableUser;
					destination:hms.LoggedIn.AdminModule.UserManagement.UserAddition;
					trigger:eAddUser;
					guard:true;
					action:{}
				}
				transition UserDeletionDone{
					source:hms.LoggedIn.AdminModule.UserManagement.UserDeletion;
					destination:hms.LoggedIn.AdminModule.UserManagement.UserDeletion;
					trigger:eDeleteUser;
					guard:(isNull<|string|>(hms.LoggedIn.AdminModule.UserManagement.UserDeletion.username)=false);
					action:{remove_val_from_map<|string,User|>(registeredUsers,username);}
				}
			}
			state SearchStudent{
				state SearchByName{}
				state SearchByRollNo{}
			}
			state ResolveComplaints{}
			state ForwardComplaints{
				toDepartment#:int;
			}
			state AddDepartment{
			}
			state HostelManagement{
				state AllotRoom{
				}
				state AddWing{
				}
				state AddRoom{
				}
				state CloseRoom{
				}
			}
			state SendGroupMessages{
			}
			state FineStudents{
			}
			state WorkerManagement{
				inTime:Date;
				outTime:Date;
			}
		}
		state StudentModule{
			state MakeRequest{
				state ChangeRoom{}
			}
			state ScheduleHouseKeeping{
				state EnterAvailability{
				}
				state EnterTimeTable{
				}
				state EnterVacation{
				}
			}
			state FeesPayment{
			}
			state PayFine{
			}
			state ComplaintModule{
				state MakeComplaints{
					compliantPriority#:int;
					problemStartDate#:Date;
					complaintArea#:string;
					state CleaningProblem{}
					state HotWaterProblem{}
					state DrinkingWaterProblem{}
					state ElectricityProblem{}
					state BrokenChairsBeds{}
					state WiFiProblem{}
					state NuisanceProblem{}		
				}
				state ViewComplaintStatus{}
				state EscalateComplaint{}
				state AcknowledgeComplaint{}
			}

		}
		state ViewEscalatedComplaints{
			state SearchComplaints{
			}
			state ViewComplaints{
			}
		}
		state CentralAdminModule{
			state CreateEscalationPolicy{}
			state ChangeEscalationPolicy{}
			state EnableEscalationPolicy{}
			state DisableEscalationPolicy{}
		}
		}
		transition LoggedOut_LoggedIn_AdminModule{
			source:hms.LoggedOut;
			destination:hms.LoggedIn.AdminModule;
			trigger:eLogin;
			guard:(enteredUser.password=hms.LoggedOut.pass) && (enteredUser.usertype=admintype);
			action:loggedInUser:=enteredUser;
		}
		transition LoggedOut_LoggedIn_StudentModule{
			source:hms.LoggedOut;
			destination:hms.LoggedIn.StudentModule;
			trigger:eLogin;
			guard:(enteredUser.password=hms.LoggedOut.pass) && (enteredUser.usertype=studenttype);
			action:loggedInUser:=enteredUser;
		}
		transition LoggedOut_LoggedIn_CentralAdminModule{
			source:hms.LoggedOut;
			destination:hms.LoggedIn.CentralAdminModule;
			trigger:eLogin;
			guard:(enteredUser.password=hms.LoggedOut.pass) && (enteredUser.usertype=centraladmintype);
			action:loggedInUser:=enteredUser;
		}
		transition LoggedOut_LoggedIn_EscalationModule{
		source:hms.LoggedOut;
		destination:hms.LoggedIn.AdminModule;
		trigger:eLogin;
		guard:(enteredUser.password=hms.LoggedOut.pass) && (enteredUser.usertype=centreheadtype);
		action:loggedInUser:=enteredUser;
	}
}