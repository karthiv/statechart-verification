statechart hms{
	types{
		type Date<| |>;
		type DateTime<| |>;
		type map<|A,B|>;
		type List<|A|>;
		struct Complaint{
			id:int;
			complainttype:int;
			roomNo:int;
			blockNo:int;
			startDate:Date;
			status:int; //Launched=1, Reviewed and propogated=2, Rejected=3, Assigned=4, Resolved=5, Acknowledged=6
			area:string;
		}
		struct Department{
			id:int;
			name:string;
			incharge:string;
			contactno:string;
		}
		struct User{
			username:string;
			password:string;
			usertype:int; //admin=1;
			contactno:string;
			emailID:string;
			enabled:boolean;
		}
		struct EscalationPolicy{
			level1Duration:int;
			level2Duration:int;
			level3Duration:int;
			level1User:User;
			level2User:User;
			level3User:User;
		}
		struct Student{
			rollNo:string;
			batch:string;
			availabilityFrom:DateTime;
			availabilityTo:DateTime;
			department:string;
			userInfo:User;
			roomNo:int;
			wingName:string;
		}
		struct Warden{
			inchargeOf:string;
			userInfo:User;
		}
		struct Room{
			roomno:int;
			status:string;
			capacity:int;
		}
		struct Wing{
			wingname:string;
			no_of_rooms:int;
			wardendetail:Warden;
			roomList:List<|Room|>;
		}
	}
	events{
		eLogin;
		eAddStudent;
		eAddWarden;
		eDeleteUser;
		eEnableUser;
		eDisableUser;
		eAddUser;
		eSearchStudentRollno;
		eSearchStudentName;
		eLogout;
		eAddWing;
		eAddRoom;
		eCloseRoom;
	}
	registeredUsers:map<|string,User|>;
	students:map<|string,Student|>;
	wardens:map<|string,Warden|>;
	complaints:map<|string, Complaint|>;
	wings:map<|string,Wing|>;
	admintype:int;
	studenttype:int; centraladmintype:int; centreheadtype:int; //usertype
	complaintLaunched:int; 
	complaintReviewedandPropogated:int; 
	complaintRejected:int; 
	complaintAssigned:int; 
	complaintResolved:int; 
	complaintAcknowledged:int;
	entry:{
			admintype:=1;
			studenttype:=2;
			centraladmintype:=3;
			centreheadtype:=4;
			complaintLaunched:=1; 
			complaintReviewedandPropogated:=2; 
			complaintRejected:=3; 
			complaintAssigned:=4; 
			complaintResolved:=5; 
			complaintAcknowledged:=6;
	}
	exit:{}
	functions{
		get_map<| A, B |>(amap : map<| A, B |>, k : A) : B; 
	    put_map<| A, B |>(amap : map<| A, B |>, k : A, v : B) : map<| A, B |>;
        remove_val_from_map<| A, B |>(amap : map<| A, B |>, k : A) : boolean;	
		sizeOf<|A,B|>(amap:map<|A,B|>):int;
		isNull<|A|>(a:A):boolean;
		get_map_key_by_val<|A, B, C|>(amap : map<| A, B |>,v:C):A;
		setNull<|A|>():A;
		updateRoomStatus<||>(amap:map<|string,Wing|>,wing:string,roomno:int):boolean;
	}
	state LoggedOut{
		uname#:string;
		pass#:string;
		enteredUser:User;
		entry:{
		}
		exit:{
			enteredUser:=get_map<|string,User|>(registeredUsers,uname);
		}
	}
	state LoggedIn{
		loggedInUser:User;
		state AdminModule{
			state UserManagement{
				state UserAddition{
					username#:string;
					password#:string;
					confirmpassword#:string;
					contactno#:string;
					emailID#:string;
					usertype#:int;
					newuser:User;
					exit:{
							newuser.username:=username;
							newuser.password:=password;
							newuser.contactno:=contactno;
							newuser.usertype:=usertype;
							newuser.emailID:=emailID;
					}
					state StudentAddition{
						rno#:string;
						batchOfJoining#:string;
						department#:string;
						stud:Student;
						exit:{
							stud.rollNo:=rno;
							stud.department:=department;
							stud.batch:=batchOfJoining;
						}
					}
					state WardenAddition{
						buildingIncharge#:string;
						w:Warden;
						exit:{
							w.inchargeOf:=buildingIncharge;
						}
					}
					transition StudentAdditionDone{
					source:hms.LoggedIn.AdminModule.UserManagement.UserAddition.StudentAddition;
					destination:hms.LoggedIn.AdminModule.UserManagement.UserAddition.StudentAddition;
					trigger:eAddStudent;
					guard:isNull<|User|>(newuser)=false && isNull<|Student|>(stud);
					action:{
							stud.userInfo:=newuser;
							students:=put_map<|string,Student|>(students,username,stud);
							registeredUsers:=put_map<|string,User|>(registeredUsers,username,newuser);
							}
					}
					transition WardenAdditionDone{
					source:hms.LoggedIn.AdminModule.UserManagement.UserAddition.WardenAddition;
					destination:hms.LoggedIn.AdminModule.UserManagement.UserAddition.WardenAddition;
					trigger:eAddWarden;
					guard:isNull<|User|>(newuser)=false && isNull<|Warden|>(w);
					action:{
							w.userInfo:=newuser;
							wardens:=put_map<|string,Warden|>(wardens,username,w);
							registeredUsers:=put_map<|string,User|>(registeredUsers,username,newuser);
							}
					}
					
			}
				state ViewUsers{
					username#:string;
					selectedUser:User;
				}
				transition UserDeletionDone{
						source:hms.LoggedIn.AdminModule.UserManagement.ViewUsers;
						destination:hms.LoggedIn.AdminModule.UserManagement.ViewUsers;
						trigger:eDeleteUser;
						guard:(isNull<|string|>(username)=false);
						action:{remove_val_from_map<|string,User|>(registeredUsers,username);}
				}
				transition EnableUserDone{
						source:hms.LoggedIn.AdminModule.UserManagement.ViewUsers;
						destination:hms.LoggedIn.AdminModule.UserManagement.ViewUsers;
						trigger:eEnableUser;
						guard:(isNull<|string|>(username)=false);
						action:{selectedUser:=get_map<|string,User|>(registeredUsers,username);selectedUser.enabled:=true;}
				}
				transition DisableUserDone{
						source:hms.LoggedIn.AdminModule.UserManagement.ViewUsers;
						destination:hms.LoggedIn.AdminModule.UserManagement.ViewUsers;
						trigger:eDisableUser;
						guard:(isNull<|string|>(username)=false);
						action:{selectedUser:=get_map<|string,User|>(registeredUsers,username);selectedUser.enabled:=false;}
				}
				
				transition ViewUsers_UserAddition{
					source:hms.LoggedIn.AdminModule.UserManagement.ViewUsers;
					destination:hms.LoggedIn.AdminModule.UserManagement.UserAddition;
					trigger:eAddUser;
					guard:true;
					action:{}
				}				
			}
			
			state SearchStudent{
				selectedStudent:Student;
				key:string;
				state Search{}
				state SearchByName{
					name#:string;
					exit:{
					key:=get_map_key_by_val<|string,Student,string|>(students,name);
					}
				}
				state SearchByRollNo{
					no#:string;
					exit:{
					key:=get_map_key_by_val<|string,Student,string|>(students,no);
					}
				}
				transition Search_SearchByName{
					source:hms.LoggedIn.AdminModule.SearchStudent.Search;
					destination: hms.LoggedIn.AdminModule.SearchStudent.SearchByName;
					trigger: eSearchStudentName;
					guard:isNull<|string|>(key)!=false;
					action:{selectedStudent:=get_map<|string,Student|>(students,key);}
				}
				transition Search_SearchByRollNo{
					source: hms.LoggedIn.AdminModule.SearchStudent.Search;
					destination: hms.LoggedIn.AdminModule.SearchStudent.SearchByRollNo;
					trigger: eSearchStudentRollno;
					guard:isNull<|string|>(key)!=false;
					action:{selectedStudent:=get_map<|string,Student|>(students,key);}
				}
			}
			state ResolveComplaints{
			}
			state ForwardComplaints{
				toDepartment#:int;
			}
			state AddDepartment{
			}
			state HostelManagement{
				state Dashboard{}
				state AllotRoom{
					rollno#:string;
					roomno#:int;
					room:Room;
					exit:{
						//allotRoom(rollno,roomno,selectedWing);
					}
					state RoomSelection{
						selectedWing#:string;
						
					}
					state StudentSelection{
					}
					
				}
				state WingAddition{
					name#:string;
					newwing:Wing;
					entry:{
						newwing.wingname:=name;
					}
				}
				state RoomAddition{
					no#:int;
				}
				state CloseRoom{
					wing_name#:string;
					no#:int;
					room:Room;
				}
				transition Dashboard_WingAddition{
					source:hms.LoggedIn.AdminModule.HostelManagement.Dashboard;
					destination:hms.LoggedIn.AdminModule.HostelManagement.WingAddition;
					trigger:eAddWing;
					guard:true;
					action:{}
				}
				transition WingAddition_WingAddition{
					source:hms.LoggedIn.AdminModule.HostelManagement.WingAddition;
					destination:hms.LoggedIn.AdminModule.HostelManagement.WingAddition;
					trigger:eAddWing;
					guard:isNull<|string|>(name)!=false;
					action:{
					wings:=put_map<|string,Wing|>(wings,name,newwing);
					}
				}
				transition Dashboard_RoomAddition{
					source:hms.LoggedIn.AdminModule.HostelManagement.Dashboard;
					destination:hms.LoggedIn.AdminModule.HostelManagement.RoomAddition;
					trigger:eAddRoom;
					guard:true;
					action:{}
				}
				transition Dashboard_CloseRoom{
					source:hms.LoggedIn.AdminModule.HostelManagement.Dashboard;
					destination:hms.LoggedIn.AdminModule.HostelManagement.CloseRoom;
					trigger:eCloseRoom;
					guard:true;
					action:{}
				}
				transition CloseRoom_CloseRoom{
					source:hms.LoggedIn.AdminModule.HostelManagement.CloseRoom;
					destination:hms.LoggedIn.AdminModule.HostelManagement.CloseRoom;
					trigger:eCloseRoom;
					guard:isNull<|int|>(no)!=false && isNull<|string|>(wing_name);
					action:{
					room.status:="closed";
					updateRoomStatus<||>(wings,wing_name,no);
					}
				}
			}
			state SendGroupMessages{
			}
			state FineStudents{
			}
			state WorkerManagement{
				inTime:Date;
				outTime:Date;
			}
		}
		state StudentModule{
			state MakeRequest{
				state ChangeRoom{}
			}
			state ScheduleHouseKeeping{
				state EnterAvailability{
				}
				state EnterTimeTable{
				}
				state EnterVacation{
				}
			}
			state FeesPayment{
			}
			state PayFine{
			}
			state ComplaintModule{
				state MakeComplaints{
					compliantPriority#:int;
					problemStartDate#:Date;
					complaintArea#:string;
					state CleaningProblem{}
					state HotWaterProblem{}
					state DrinkingWaterProblem{}
					state ElectricityProblem{}
					state BrokenChairsBeds{}
					state WiFiProblem{}
					state NuisanceProblem{}		
				}
				state ViewComplaintStatus{}
				state EscalateComplaint{}
				state AcknowledgeComplaint{}
			}

		}
		state ViewEscalatedComplaints{
			state SearchComplaints{
			}
			state ViewComplaints{
			}
		}
		state CentralAdminModule{
			state CreateEscalationPolicy{}
			state ChangeEscalationPolicy{}
			state EnableEscalationPolicy{}
			state DisableEscalationPolicy{}
		}
		}
		transition LoggedOut_LoggedIn_AdminModule{
			source:hms.LoggedOut;
			destination:hms.LoggedIn.AdminModule;
			trigger:eLogin;
			guard:(enteredUser.password=pass) && (enteredUser.usertype=admintype);
			action:loggedInUser:=enteredUser;
		}
		transition LoggedOut_LoggedIn_StudentModule{
			source:hms.LoggedOut;
			destination:hms.LoggedIn.StudentModule;
			trigger:eLogin;
			guard:(enteredUser.password=pass) && (enteredUser.usertype=studenttype);
			action:loggedInUser:=enteredUser;
		}
		transition LoggedOut_LoggedIn_CentralAdminModule{
			source:hms.LoggedOut;
			destination:hms.LoggedIn.CentralAdminModule;
			trigger:eLogin;
			guard:(enteredUser.password=pass) && (enteredUser.usertype=centraladmintype);
			action:loggedInUser:=enteredUser;
		}
		transition LoggedOut_LoggedIn_EscalationModule{
			source:hms.LoggedOut;
			destination:hms.LoggedIn.AdminModule;
			trigger:eLogin;
			guard:(enteredUser.password=pass) && (enteredUser.usertype=centreheadtype);
			action:loggedInUser:=enteredUser;
		}
		transition LoggedIn_LoggedOut{
			source:hms.LoggedIn;
			destination:hms.LoggedOut;
			trigger:eLogout;
			guard:true;
			action:{uname:="";pass:="";enteredUser:=setNull<|User|>();}
		}
}